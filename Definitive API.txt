openapi: 3.0.3
info:
  title: Shop API
  description: |-
    This is sample api of a online buy and sell webpage. General queries given: Sort which will sort by name, price, rating and limits which will limit amount of items shown.
  contact:
    email: iodonnel@unb.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://cs3103.unb.ca
    description: server
tags:
  - name: user
    description: Every operation a user can do
  - name: store
    description: Every operation management can do to the store
  - name: cart
    description: Every operation a user can do to a cart
paths:
  /log_In:
    post: 
      tags:
        - user
      summary: Logs customer into the system
      description: ''
      operationId: loginCustomer
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
            description: successful operation
            headers:
              X-Rate-Limit:
                description: calls per hour allowed by the user
                schema:
                  type: integer
                  format: int32
              X-Expires-After:
                description: date in UTC when token expires
                schema:
                  type: string
                  format: date-time
            content:
              application/xml:
                schema:
                  type: string
              application/json:
                schema:
                  type: string
        '400':
          description: Invalid username/password supplied
  /log_out:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutCustomer
      parameters: []
      responses:
        default:
          description: successful operation
  /customer/register:
    put:
      tags:
        - user
      summary: Creates a new customer account
      description: Creates a new customer account, by a username, an email, and a password.
                   Manager code given to customers is always 0.  New managers will be added to the database directly.
      requestBody:
        description: Created a new user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '201':
          description: Account created
        '400':
          description: Bad Request
        '422':
          description: Validation Exception
      security:
        - authen:
          - write:items
          - read:items
  /post_Review:
    post:
      tags:
        - user
      summary: Adds a user review to an item
      description: Adds a user review to an item including an item ID, a user ID, the review body and a star rating
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '201':
          description: Review created
        '400':
          description: Bad Request
        '422':
          description: Validation Exception
      security:
        - authen:
          - write:items
          - read:items
  /add_Item_To_Cart:
    post:
      tags:
        - cart
      summary: Adds an item to a user's cart
      description: Adds an item to a user's cart using the user ID and an item ID
      operationId: add_Item_To_Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/xml:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
        '201':
          description: Cart item created
        '400':
          description: Bad Request
        '404':
          description: Item not found
        '422':
          description: Validation Exception
      security:
        - authen:
          - write:items
          - read:items
  /cart/{itemID}:
    post:
      tags:
        - cart
      summary: Updates an item in a user's cart
      description: Updates the quantity of items in a users cart
      operationId: Update_cart_item
      parameters:
        - name: itemID
          in: path
          required: true
          schema:
            type: integer
        - name: quantity
          in: query
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Quantity updated successfully
        '204':
          description: Request Succeeded
        '400':
          description: Bad request
        '401':
          description: Current user does not own cart
        '404':
          description: Could not find item in cart
      security:
        - authen:
          - write:items
          - read:items
  /remove_Item_From_Cart/{userID}/{itemID}:
    delete:
      tags:
        - cart
      summary: Removes a item from a user's cart
      description: Removes a item to a user's cart using the user ID and the item ID 
      operationId: remove_Item_From_Cart
      parameters:
        - name: userID
          in: path
          description: user ID that needs to be fetched
          required: true 
          schema:
            type: integer
            format: int64
        - name: itemID
          in: path
          description: item ID that needs to be fetched
          required: true 
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful deletion
        '204':
          description: Request succeeded
        '401':
          description: User does not own the cart
        '404':
          description: Item not found
        '422':
          description: Validation Exception
      security:
        - authen:
          - write:items
          - read:items
  /add_Item:
    post:
      tags:
        - store
      summary: Adds a new item to the store
      description: Adds a new item to the store using a name, a description, an image, a price and how much of the item is in stock
      operationId: add_Item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '201':
          description: Item created
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - authen:
          - write:items
          - read:items
  /remove_Item/{itemID}:
    delete:
      tags:
        - store
      summary: Deletes an item from the store
      description: Deletes an item from the store using an ID
      operationId: remove_Item
      parameters:
        - name: itemID 
          in: path
          description: Item ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Succesful Deletion
        '404':
          description: Invalid item ID
        '422':
          description: Validation Exception
      security:
        - authen:
          - write:items
          - read:items
  /item/{itemId}:
    get:
      tags:
        - store
      summary: Gets a single item
      description: Can only be done by logged user
      parameters:
        - name: itemId
          in: path
          description: Items id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
        '404':
          description: Invalid item ID
        '422':
          description: Validation Exception
      security:
        - authen:
          - write:items
          - read:items
  /items/:
    get:
      tags:
        - store
      summary: Gets all items
      description: Can only be done by logged user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad response
  /update_Sale/{itemID}/{salePrice}:
    put:
      tags:
        - store
      summary: Allows management to update the sale of an item
      description: Allows management to update the sale of an item using an item ID
      parameters:
        - name: itemID
          in: path
          description: ID of the item to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: salePrice
          in: path
          description: The new price of the item of the corresponding ID
          required: true
          schema:
            type: number
            format: float64
      responses:
        '200':
          description: Succesful update
        '204':
          description: Request succeeded
        '404':
          description: Invalid item ID
        '422':
          description: Validation exception
      security:
        - authen:
          - write:items
          - read:items
  /view_Item/{itemID}:
    get:
      tags:
        - user
      summary: Gets a specific item
      description: Gets a specific item from a ID
      operationId: view_Item
      parameters:
        - name: itemID
          in: path
          description: ID of item to get
          required: true
          explode: true
          schema:
            type: integer
            format: integer64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '204':
          description: Request succeeded
        '404':
          description: Invalid item
      security:
        - authen:
          - write:items
          - read:items
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        uname:
          type: string
          example: JuiceBuyer18
        email:
          type: string
          example: jb18@gmail.com
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Lewis
        managerCode:
          type: integer
          format: int64
          example: 0
      xml:
        name: customer
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 18
        item_Name:
          type: string
          example: Great Value Orange Juice
        item_Description:
          type: string
          example: 500 ml. High in Vitamin C and Potassium
        item_Image:
          type: string
          example: greatValleyOJ.jpg
        price:
          type: number
          format: float64
          example: $6.99
        stock:
          type: integer
          format: int64
          example: 7
        reviews:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Review'
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 18
        quantity:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Item'
    Review:
      type: object
      properties:
        reviewID:
          type: integer
          format: int64
          example: 6
        userID:
          type: integer
          format: int64
          example: 8
        review:
          type: string
          example: I sure do love my Great Valley Orange Juice first thing in the morning
        stars:
          type: number
          example: 5.0
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    authen:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header