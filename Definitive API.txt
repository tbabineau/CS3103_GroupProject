openapi: 3.0.3
info:
  title: Shop API
  description: |-
    This is sample api of a online buy and sell webpage. General queries given: Sort which will sort by name, price, rating and limits which will limit amount of items shown.
  contact:
    email: iodonnel@unb.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://cs3103.unb.ca
    description: server
tags:
  - name: user
    description: Every operation a user can do
  - name: store
    description: Every operation management can do to the store
  - name: cart
    description: Every operation a user can do to a cart
paths:
  /account:
    post: 
      tags:
        - user
      summary: Logs a user into the system
      description: ''
      operationId: loginCustomer
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '204':
            description: successful login
        '401':
          description: Invalid username/password supplied
    delete:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutCustomer
      responses:
        '204':
          description: Successfully logged out
        '400':
          description: Bad request
        '401':
          description: Not logged in
  /account/register:
    post:
      tags:
        - user
      summary: Creates a new customer account
      description: Creates a new customer account, by a username, an email, and a password.
                   Manager code given to customers is always 0.  New managers will be added to the database directly.
      parameters:
        - name: uname
          in: query
          description: The user's chosen username
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: The user's email
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The user's password
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Account created
        '400':
          description: Account could not be created
      security:
        - authen:
          - write:items
          - read:items
  /account/verify:
    post:
      tags:
        - user
      summary: Allows a user to verify their account
      description: Sends a verification hash that given to the user in order to verify their email
      parameters:
        - name: verifyHash
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User verified successfully
        '400':
          description: User could not be verified
  /reviews:
    get:
      tags:
        - user
      summary: Gets user reviews
      description: Gets user reviews, can be sorted by itemID, userID, and star rating
      parameters:
        - name: itemID
          in: query
          description: The ID of the item that the review was left on
          required: false
          schema:
            type: integer
        - name: userID
          in: query
          description: The ID of the user which posted the review
          required: false
          schema:
            type: integer
        - name: rating
          in: query
          description: A specific item star rating
          required: false
          schema:
            type: number
        - name: maxRating
          in: query
          description: A maximum item star rating (no higher than 5)
          required: false
          schema:
            type: number
        - name: minRating
          in: query
          description: A minimum item star rating (no lower than 0)
          required: false
          schema:
            type: number
      responses:
        '200':
          description: Reviews returned successfully
    post:
      tags:
        - user
      summary: Adds a user review to an item
      description: Adds a user review to an item including an item ID, a user ID, the review body and a star rating
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      parameters:
        - name: itemID
          in: query
          description: The ID for the review subject ID
          required: true
          schema:
            type: string
        - name: reviewBody
          in: query
          description: The user's review
          required: true
          schema:
            type: string
        - name: starRate
          in: query
          description: The user's star rating for an item
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '201':
          description: Review created
        '404':
          description: Could not find an item with a matching ID
      security:
        - authen:
          - write:items
          - read:items
  /reviews/{reviewID}:
    get:
      tags:
        - user
      summary: Gets a specific review
      description: Gets a specific review by reviewID
      parameters:
        - name: reviewID
          description: ID associated with a review
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Review returned successfully
        '404':
          description: Review with matching ID could not be located
    put:
      tags:
        - user
      summary: Allows the user to update a review
      description: Updates the entire review as long as the user posted it
      parameters:
        - name: reviewID
          description: ID associated with a review
          in: path
          required: true
          schema:
            type: integer
        - name: reviewBody
          description: The user's review
          in: query
          required: true
          schema:
            type: string
        - name: starRate
          description: The user's star rating for an item
          in: query
          required: true
          schema:
            type: number
      responses:
        '204':
          description: Review successfully updated
        '401':
          description: User did not post the review
        '404':
          description: Review with matching ID could not be located
    delete:
      tags:
        - user
      summary: Allows the user to delete a review
      description: Allows the user which posted the review to delete it
      parameters:
        - name: reviewID
          description: ID associated with a review
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Review successfully deleted
        '401':
          description: User did not post the review
        '404':
          description: Review with matching ID could not be located
  /cart:
    get:
      tags:
        - cart
      summary: Returns the items in a user's cart
      description: Gets a list of all items in the current user's cart
      operationId: get_cart
      parameters:
        - name: search
          description: Search for an item with a matching title
          in: query
          required: false
          schema:
            type: string
        - name: quantity
          description: Search for items by specific quantity
          in: query
          required: false
          schema:
            type: integer
        - name: maxQuantity
          description: Search for items by a maximum quantity
          in: query
          required: false
          schema:
            type: integer
        - name: minQuantity
          description: Search for items by a minimum quantity
          in: query
          required: false
          schema:
            type: integer
        - name: price
          description: Search for items by specific price
          in: query
          required: false
          schema:
            type: integer
        - name: maxPrice
          description: Search for items by a maximum price
          in: query
          required: false
          schema:
            type: integer
        - name: minPrice
          description: Search for items by a minimum price
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Items have been returned successfully
		'400':
          description: Invalid parameter(s) provided
        '401':
          description: User does not own the cart
    post:
      tags:
        - cart
      summary: Adds an item to a user's cart
      description: Adds an item to a user's cart using the user ID and an item ID
      operationId: add_Item_To_Cart
      parameters:
        - name: itemID
          in: query
          required: true
          schema:
            type: integer
        - name: quantity
          in: query
          required: false
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/xml:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
            application/xml:
              schema:
                $ref: '#/components/schemas/Cart'
        '201':
          description: Cart item created
        '400':
          description: Invalid itemID / quantity provided
        '401':
          description: User does not own this cart
        '404':
          description: Item not found
      security:
        - authen:
          - write:items
          - read:items
  /cart/{itemID}:
    put:
      tags:
        - cart
      summary: Updates an item in a user's cart
      description: Updates the quantity of items in a users cart
      operationId: Update_cart_item
      parameters:
        - name: itemID
          in: path
          required: true
          schema:
            type: integer
        - name: quantity
          in: query
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Quantity updated successfully
        '204':
          description: Request Succeeded
        '400':
          description: Invalid itemID / quantity provided
        '401':
          description: Current user does not own cart
        '404':
          description: Could not find item in cart
      security:
        - authen:
          - write:items
          - read:items
    delete:
      tags:
        - cart
      summary: Removes a item from a user's cart
      description: Removes a item to a user's cart using the user ID and the item ID 
      operationId: remove_Item_From_Cart
      parameters:
        - name: itemID
          in: path
          description: item ID that needs to be fetched
          required: true 
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful deletion
        '204':
          description: Request succeeded
        '401':
          description: User does not own the cart
        '404':
          description: Item not found
      security:
        - authen:
          - write:items
          - read:items
  /items:
    get:
      tags:
        - user
      summary: Gets all items
      description: Can only be done by logged user
      parameters:
        - name: search
          description: Search for an item with a matching title
          in: query
          required: false
          schema:
            type: string
        - name: quantity
          description: Search for items by specific quantity
          in: query
          required: false
          schema:
            type: integer
        - name: maxQuantity
          description: Search for items by a maximum quantity
          in: query
          required: false
          schema:
            type: integer
        - name: minQuantity
          description: Search for items by a minimum quantity
          in: query
          required: false
          schema:
            type: integer
        - name: price
          description: Search for items by specific price
          in: query
          required: false
          schema:
            type: integer
        - name: maxPrice
          description: Search for items by a maximum price
          in: query
          required: false
          schema:
            type: integer
        - name: minPrice
          description: Search for items by a minimum price
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid parameter(s) provided
    post:
      tags:
        - store
      summary: Adds a new item to the store
      description: Adds a new item to the store using a name, a description, an image, a price and how much of the item is in stock
      operationId: add_Item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      parameters:
        - name: itemName
          in: query
          description: The item's name
          required: true
          schema:
            type: string
        - name: itemDescript
          in: query
          description: The item's description
          required: true
          schema:
            type: string
        - name: itemImage
          in: query
          description: A url depicting the item
          required: true
          schema:
            type: string
        - name: price
          in: query
          description: The item's price
          required: true
          schema:
            type: number
        - name: itemStock
          in: query
          description: How much of the item is currently available
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '201':
          description: Item created
        '400':
          description: Invalid input. Could not create item
        '401':
          description: User does not own item
      security:
        - authen:
          - write:items
          - read:items
  /items/{itemID}:
    get:
      tags:
        - user
      summary: Gets a single item
      description: Can only be done by logged user
      parameters:
        - name: itemID
          in: path
          description: Items id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Invalid item ID
      security:
        - authen:
          - write:items
          - read:items
    put:
      tags:
        - store
      summary: Allows management to update an item
      description: Allows management to update the sale of an item using an item ID
      parameters:
        - name: itemID
          in: path
          description: ID of the item to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: salePrice
          in: query
          description: The new price of the item of the corresponding ID
          required: true
          schema:
            type: number
            format: float64
      responses:
        '200':
          description: Succesful update
        '204':
          description: Request succeeded
        '401':
          description: User does not own item
        '404':
          description: Invalid item ID
      security:
        - authen:
          - write:items
          - read:items
    delete:
      tags:
        - store
      summary: Deletes an item from the store
      description: Deletes an item from the store using an ID
      operationId: remove_Item
      parameters:
        - name: itemID 
          in: path
          description: Item ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Request succeeded
        '401':
          description: Unauthorized
        '404':
          description: Invalid item ID
      security:
        - authen:
          - write:items
          - read:items
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        uname:
          type: string
          example: JuiceBuyer18
        email:
          type: string
          example: jb18@gmail.com
        managerCode:
          type: integer
          format: int64
          example: 0
      xml:
        name: customer
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 18
        item_Name:
          type: string
          example: Great Value Orange Juice
        item_Description:
          type: string
          example: 500 ml. High in Vitamin C and Potassium
        item_Image:
          type: string
          example: greatValleyOJ.jpg
        price:
          type: number
          format: float64
          example: $6.99
        stock:
          type: integer
          format: int64
          example: 7
        reviews:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Review'
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 18
        quantity:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Item'
    Review:
      type: object
      properties:
        reviewID:
          type: integer
          format: int64
          example: 6
        itemID:
          type: integer
          format: int64
          example: 18
        userID:
          type: integer
          format: int64
          example: 8
        review:
          type: string
          example: I sure do love my Great Valley Orange Juice first thing in the morning
        stars:
          type: number
          format: float64
          example: 5.0
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    authen:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header